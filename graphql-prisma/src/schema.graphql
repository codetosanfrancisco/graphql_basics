type Query {
  hello: String!
  me: User!
  post(id: ID!): Post!
  greeting(name: String, age: Int!): String!
  grades: [Int!]!
  add(numbers: [Int!]!): Int!
  users(id: String): [User!]!
  posts: [Post!]!
  myPosts(query: String!): [Post!]!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deletePost(id: ID!): Post!
  deleteComment(id: ID!): Comment!
  updateUser(data: UpdateUserInput!): User!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
  count: Int!
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  post: ID!
  author: ID!
  body: String!
}

input UpdateCommentInput {
  body: String
}

type User {
  id: ID!
  name: String!
  email: String
  posts: [Post!]!
  comments: [Comment!]!
  password: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  body: String!
  author: User!
  post: Post!
}
